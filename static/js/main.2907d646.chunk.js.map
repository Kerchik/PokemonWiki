{"version":3,"sources":["sw.png","store.js","Content.jsx","Profile.jsx","Header.jsx","map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","store","id","photo","Content","props","useState","isHidden","setIsHidden","className","onClick","onMouseOver","onMouseOut","to","src","name","Profile","state","height","mass","hairColor","gender","fetch","then","data","text","data2","json","JSON","parse","setState","hair_color","this","React","Component","Header","logo","characters","App","exact","path","render","map","m","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAOC,QAAU,IAA0B,gC,yLCAhCC,EAAQ,CACfC,GAAI,GACJC,MAAO,IC2BIC,EAvBC,SAACC,GAAW,IAAD,EACOC,oBAAS,GADhB,mBAClBC,EADkB,KACRC,EADQ,KAYvB,OACI,yBAAKC,UAAU,OAAOC,QAXd,WACRT,EAAMC,GAAKG,EAAMH,GACjBD,EAAME,MAAQE,EAAMF,OASkBQ,YAPzB,WACbH,GAAY,IAMmDI,WAJ/C,WAChBJ,GAAY,KAIR,kBAAC,IAAD,CAASK,GAAG,SACpB,qCACY,yBAAKJ,UAAU,YAAYK,IAAKT,EAAMF,MAAOD,GAAIG,EAAMH,KACrDK,EAA6D,GAAlD,yBAAKE,UAAU,eAAeJ,EAAMU,S,yDC4BlDC,E,YA9CX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDY,MAAQ,CACTF,KAAM,GACNG,OAAQ,GACRC,KAAM,GACNC,UAAW,GACXC,OAAQ,IAPG,E,iFAUE,IAAD,OAChBC,MAAM,+BAAD,OAAgCrB,EAAMC,KAC1CqB,MAAK,SAAAC,GACFA,EAAKC,OACJF,MAAK,SAAAG,GACF,IAAIC,EAAOC,KAAKC,MAAMH,GACtB,EAAKI,SAAS,CACVf,KAAMY,EAAKZ,KACXG,OAAQS,EAAKT,OACbC,KAAMQ,EAAKR,KACXC,UAAWO,EAAKI,WAChBV,OAAQM,EAAKN,iB,+BAOzB,OACI,yBAAKZ,UAAU,WACX,6BACI,yBAAKA,UAAU,YAAYK,IAAKb,EAAME,SAE1C,yBAAKM,UAAU,iBACX,oCAAUuB,KAAKf,MAAMF,MACrB,sCAAYiB,KAAKf,MAAMC,QACvB,oCAAUc,KAAKf,MAAME,MACrB,0CAAgBa,KAAKf,MAAMG,WAC3B,sCAAYY,KAAKf,MAAMI,c,GAvCrBY,IAAMC,W,OCUbC,EAVA,WACX,OACA,yBAAK1B,UAAU,UAEP,yBAAKK,IAAKsB,IAAM3B,UAAU,iBCRzB4B,EAAa,CACtB,CACInC,GAAI,EACJa,KAAM,iBACNZ,MAAO,gHAEX,CACID,GAAI,EACJa,KAAM,QACNZ,MAAO,0HAEX,CACID,GAAI,EACJa,KAAM,QACNZ,MAAO,kIAEX,CACID,GAAI,EACJa,KAAM,cACNZ,MAAO,wECOAmC,MAjBf,WAEE,OAEE,yBAAK7B,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,IAChBC,OAAQ,SAACpC,GAAD,OAAWgC,EAAWK,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,iBAAatC,EAAb,CAAoBU,KAAM4B,EAAE5B,KAAM6B,IAAKD,EAAEzC,GAAIA,GAAIyC,EAAEzC,GAAIC,MAAOwC,EAAExC,eACzG,kBAAC,IAAD,CAAOqC,KAAK,QACVC,OAAQ,SAACpC,GAAD,OAAW,kBAAC,EAAYA,QCPpBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAST,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEHU,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.2907d646.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sw.b78faeed.png\";","export let store = {\r\n    id: \"\",\r\n    photo: \"\"\r\n} ","import React,{useState} from \"react\"\r\nimport './App.css';\r\nimport {NavLink} from 'react-router-dom'\r\nimport {store} from './store'\r\n\r\n\r\nconst Content = (props) => {\r\n    let [isHidden, setIsHidden] = useState(true)\r\n    let click = () => {\r\n        store.id = props.id\r\n        store.photo = props.photo\r\n    }\r\n    let textAppear = () => {\r\n        setIsHidden(false)\r\n    }\r\n    let textDissapear = () => {\r\n        setIsHidden(true)\r\n    }\r\n    return (\r\n        <div className=\"card\" onClick={click} onMouseOver={textAppear} onMouseOut={textDissapear}>\r\n            <NavLink to=\"/info\">\r\n\t\t\t\t<p>asdasd</p>\r\n                <img className=\"transform\" src={props.photo} id={props.id}/>\r\n                {!isHidden ? <div className=\"onHoverText\">{props.name}</div> : \"\"}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content","import React from 'react'\r\nimport {Route} from 'react-router-dom'\r\nimport {store} from './store'\r\n\r\nclass Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: \"\",\r\n            height: \"\",\r\n            mass: \"\",\r\n            hairColor: \"\",\r\n            gender: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(`https://swapi.co/api/people/${store.id}`)\r\n        .then(data => {\r\n            data.text()\r\n            .then(data2 => {\r\n                let json = JSON.parse(data2);\r\n                this.setState({\r\n                    name: json.name,\r\n                    height: json.height,\r\n                    mass: json.mass,\r\n                    hairColor: json.hair_color,\r\n                    gender: json.gender,\r\n                    \r\n                });\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"profile\">\r\n                <div>\r\n                    <img className=\"mainPhoto\" src={store.photo} />\r\n                </div>\r\n                <div className=\"characterInfo\">\r\n                    <p>Name: {this.state.name}</p>\r\n                    <p>Height: {this.state.height}</p>\r\n                    <p>Mass: {this.state.mass}</p>\r\n                    <p>Hair Color: {this.state.hairColor}</p>\r\n                    <p>Gender: {this.state.gender}</p>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n}\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport logo from './sw.png';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n    return (\r\n    <div className=\"Header\">\r\n          \r\n            <img src={logo} className=\"graficLogo\" />\r\n          \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Header","export const characters = [\r\n    {\r\n        id: 1,\r\n        name: \"Luke Skywalker\",\r\n        photo: \"https://lumiere-a.akamaihd.net/v1/images/luke-skywalker-i-am-a-jedi_fce1d84d.jpeg?region=204%2C0%2C414%2C413\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"C-3PO\",\r\n        photo: \"https://images.immediate.co.uk/production/volatile/sites/3/2019/10/EP9-FF-001686-336e75b.jpg?quality=90&resize=620,413\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"R2-D2\",\r\n        photo: \"https://vignette.wikia.nocookie.net/ru.starwars/images/1/1a/R2d2.jpg/revision/latest/scale-to-width-down/500?cb=20120924084739\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Darth Vader\",\r\n        photo: \"https://cdn1us.denofgeek.com/sites/denofgeekus/files/vader-main.jpg\"\r\n    },\r\n\r\n]","import React from 'react';\nimport Content,{id} from './Content'\nimport logo from './sw.png';\nimport './App.css';\nimport Profile from './Profile';\nimport {Route,NavLink} from 'react-router-dom'\nimport Header from './Header.jsx'\nimport {characters} from './map'\n\nfunction App() {\n  \n  return (\n    \n    <div className=\"App\">\n      \n      <Header />\n      <Route exact path=\"/\"\n        render={(props) => characters.map(m => <Content {...props} name={m.name} key={m.id} id={m.id} photo={m.photo}/>)}/>  \n      <Route path=\"/info\"\n        render={(props) => <Profile {...props}  />}/>\n     \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n<BrowserRouter>\n    <App />\n</BrowserRouter>),\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["sw.png","store.js","charactersReducer.js","Content.jsx","Profile.jsx","ProfileContainer.jsx","Header.jsx","map.js","ContentContainer.jsx","App.js","serviceWorker.js","reduxStore.js","index.js"],"names":["module","exports","store","id","photo","initialState","changeId","type","charactersReducer","state","action","Content","props","useState","isHidden","setIsHidden","className","onClick","changePhoto","onMouseOver","onMouseOut","to","alt","name","src","TransitionGroup","timeout","CSSTransition","classNames","Profile","height","mass","hairColor","gender","fetch","this","then","data","text","data2","json","JSON","parse","setState","hair_color","React","Component","ProfileContainer","connect","characters","dispatch","newPostText","Header","logo","ContentContainer","newId","newPhoto","App","exact","path","render","map","m","key","Boolean","window","location","hostname","match","reducers","combineReducers","createStore","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3918e7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sw.b78faeed.png\";","export let store = {\r\n    id: \"\",\r\n    photo: \"\"\r\n} ","const CHANGE_ID = \"CHANGE_ID\"\r\nconst CHANGE_PHOTO = \"CHANGE_PHOTO\"\r\n\r\nlet initialState = {\r\n    id: \"\",\r\n    photo: \"\"\r\n}\r\n\r\nconst charactersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_ID: {\r\n            return {...state, id: action.id}\r\n        }\r\n        case CHANGE_PHOTO: {\r\n            return {...state, photo: action.photo}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeId = (id) => ({type: CHANGE_ID, id})\r\nexport const changePhoto = (photo) => ({type: CHANGE_PHOTO, photo})\r\n\r\nexport default charactersReducer;","import React,{useState} from \"react\"\r\nimport './App.css';\r\nimport {NavLink} from 'react-router-dom'\r\nimport {store} from './store'\r\nimport {TransitionGroup,CSSTransition} from 'react-transition-group'\r\nimport { changeId, changePhoto } from \"./charactersReducer\";\r\n\r\nconst Content = (props) => {\r\n    let [isHidden, setIsHidden] = useState(true)\r\n    let click = () => {\r\n        props.changeId(props.id);\r\n        props.changePhoto(props.photo);\r\n        store.photo = props.photo\r\n    }\r\n    let textAppear = () => {\r\n        setIsHidden(false)\r\n    }\r\n    let textDissapear = () => {\r\n        setIsHidden(true)\r\n    }\r\n    return (\r\n        <div className=\"card\" onClick={click} onMouseOver={textAppear} onMouseOut={textDissapear}>\r\n            <NavLink to=\"/info\">\r\n                <img className=\"transform\" alt={props.name} src={props.photo} id={props.id}/>\r\n                <TransitionGroup timeout={0}>\r\n                    {!isHidden && <CSSTransition timeout={0} classNames=\"option\"><div className=\"onHoverText\">{props.name}</div></CSSTransition>}\r\n                </TransitionGroup>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content","import React from 'react'\r\nimport {store} from './store'\r\n\r\nclass Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: \"\",\r\n            height: \"\",\r\n            mass: \"\",\r\n            hairColor: \"\",\r\n            gender: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(`https://swapi.co/api/people/${this.props.id}`)\r\n        .then(data => {\r\n            data.text()\r\n            .then(data2 => {\r\n                let json = JSON.parse(data2);\r\n                this.setState({\r\n                    name: json.name,\r\n                    height: json.height,\r\n                    mass: json.mass,\r\n                    hairColor: json.hair_color,\r\n                    gender: json.gender,\r\n                    \r\n                });\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"profile\">\r\n                <div>\r\n                    <img className=\"mainPhoto\" alt={this.state.name} src={this.props.photo} />\r\n                </div>\r\n                <div className=\"characterInfo\">\r\n                    <p>Name: {this.state.name}</p>\r\n                    <p>Height: {this.state.height}</p>\r\n                    <p>Mass: {this.state.mass}</p>\r\n                    <p>Hair Color: {this.state.hairColor}</p>\r\n                    <p>Gender: {this.state.gender}</p>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n}\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {changeId} from './charactersReducer'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        id: state.characters.id,\r\n        photo: state.characters.photo\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeId: (newPostText) => {\r\n            dispatch(changeId(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst ProfileContainer = connect(mapStateToProps, mapDispatchToProps)(Profile)\r\nexport default ProfileContainer;","import React from 'react'\r\nimport logo from './sw.png';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return (\r\n      <div className=\"Header\" >\r\n        <Link to=\"\" >\r\n            <img src={logo}  alt=\"swLogo\" className=\"graficLogo\" />\r\n        </Link>\r\n      </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default Header","export const characters = [\r\n    {\r\n        id: 1,\r\n        name: \"Luke Skywalker\",\r\n        photo: \"https://lumiere-a.akamaihd.net/v1/images/luke-skywalker-i-am-a-jedi_fce1d84d.jpeg?region=204%2C0%2C414%2C413\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"C-3PO\",\r\n        photo: \"https://images.immediate.co.uk/production/volatile/sites/3/2019/10/EP9-FF-001686-336e75b.jpg?quality=90&resize=620,413\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"R2-D2\",\r\n        photo: \"https://vignette.wikia.nocookie.net/ru.starwars/images/1/1a/R2d2.jpg/revision/latest/scale-to-width-down/500?cb=20120924084739\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Darth Vader\",\r\n        photo: \"https://cdn1us.denofgeek.com/sites/denofgeekus/files/vader-main.jpg\"\r\n    },\r\n\r\n]","import React from 'react';\r\nimport Content from './Content'\r\nimport {connect} from 'react-redux'\r\nimport {changeId, changePhoto} from './charactersReducer'\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        \r\n        //idd: state.characters.id,\r\n        \r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeId: (newId) => {\r\n            dispatch(changeId(newId));\r\n        },\r\n        changePhoto: (newPhoto) => {\r\n            dispatch(changePhoto(newPhoto));\r\n        }\r\n    }\r\n}\r\n\r\nconst ContentContainer = connect(mapStateToProps, mapDispatchToProps)(Content)\r\nexport default ContentContainer;","import React from 'react';\nimport Content from './Content'\nimport './App.css';\nimport ProfileContainer from './ProfileContainer';\nimport {Route} from 'react-router-dom'\nimport Header from './Header.jsx'\nimport {characters} from './map'\nimport ContentContainer from './ContentContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Route exact path=\"/\"\n        render={(props) => characters.map(m => <ContentContainer {...props} name={m.name} key={m.id} id={m.id} photo={m.photo}/>)}/>  \n      <Route path=\"/info\"\n        render={(props) => <ProfileContainer {...props}  />}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore, combineReducers} from \"redux\"\r\nimport charactersReducer from \"./charactersReducer\"\r\n\r\n\r\nlet reducers = combineReducers({\r\n    characters: charactersReducer\r\n})\r\n\r\nlet store = createStore(reducers)\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './reduxStore';\n\nReactDOM.render((\n<BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n        <App />\n    </Provider>\n</BrowserRouter>),\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}